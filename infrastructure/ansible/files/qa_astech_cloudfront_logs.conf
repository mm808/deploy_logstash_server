input {
  s3 {
    "region" => "us-east-1"
    "bucket" => "connect-cloudfront-logs-customer-qa"
    "prefix" => "customer-qa"
    "interval" => "20"
     add_field => {
      "doctype" => "cloudfront-logs"
	  	}
	}
}
filter {
  if [doctype] == "cloudfront-logs" or [log_format] == "cloudfront-logs" {
      grok {
          match => ["message", "%{DATE_EU:date}\t%{TIME:time}\t(?<x_edge_location>\b[\w\-]+\b)\t(?:%{NUMBER:sc_bytes:int}|-)\t%{IPORHOST:c_ip}\t%{WORD:cs_method}\t%{HOSTNAME:cs_host}\t%{NOTSPACE:cs_uri_stem}\t%{NUMBER:sc_status:int}\t%{GREEDYDATA:referrer}\t%{GREEDYDATA:User_Agent}\t%{GREEDYDATA:cs_uri_stem}\t%{GREEDYDATA:cookies}\t%{WORD:x_edge_result_type}\t%{NOTSPACE:x_edge_request_id}\t%{HOSTNAME:x_host_header}\t%{URIPROTO:cs_protocol}\t%{INT:cs_bytes:int}\t%{NUMBER:time_taken}\t%{DATA:x_forwarded_for}\t%{DATA:ssl_protocol}\t%{DATA:ssl_cipher}\t%{DATA:x_edge_response_result_type}\tHTTP/%{NUMBER:cs_protocol_version}\t%{DATA:fle_status}\t%{DATA:fle_encrypted_fields}\t%{DATA:c_port}\t%{NUMBER:time_to_first_byte}\t%{DATA:x_edge_detailed_result_type}\t%{DATA:sc_content_type}\t%{DATA:sc_content_len}\t%{DATA:sc_range_start}\t%{GREEDYDATA:sc_range_end}"]
      }
      if [c_ip] {
          geoip {
              source => "c_ip"
              target => "geoip"
          }
      }
  }
}
output {
  opensearch {
    hosts => ["https://vpc-company-elastic-search-qa-yaxz42zksfxjwbwxom7hxnak2y.us-east-1.es.amazonaws.com:443"]
    index => "company-cloudfront-logs-%{+YYYY.MM.dd}"
    ecs_compatibility => disabled
  }
}
